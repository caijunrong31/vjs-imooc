{"remainingRequest":"/Users/junronngcai/Downloads/vue3-json-schema-form/node_modules/babel-loader/lib/index.js!/Users/junronngcai/Downloads/vue3-json-schema-form/node_modules/ts-loader/index.js??ref--14-2!/Users/junronngcai/Downloads/vue3-json-schema-form/node_modules/eslint-loader/index.js??ref--13-0!/Users/junronngcai/Downloads/vue3-json-schema-form/lib/utils.ts","dependencies":[{"path":"/Users/junronngcai/Downloads/vue3-json-schema-form/lib/utils.ts","mtime":1608516377730},{"path":"/Users/junronngcai/Downloads/vue3-json-schema-form/node_modules/cache-loader/dist/cjs.js","mtime":1607437832202},{"path":"/Users/junronngcai/Downloads/vue3-json-schema-form/node_modules/babel-loader/lib/index.js","mtime":1608516392415},{"path":"/Users/junronngcai/Downloads/vue3-json-schema-form/node_modules/ts-loader/index.js","mtime":1608516394013},{"path":"/Users/junronngcai/Downloads/vue3-json-schema-form/node_modules/eslint-loader/index.js","mtime":1607437999134}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/junronngcai/Downloads/vue3-json-schema-form/node_modules/eslint-loader/index.js??ref--13-0!/Users/junronngcai/Downloads/vue3-json-schema-form/lib/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import Ajv from 'ajv'\n\nimport { Schema } from './types'\n\nimport jsonpointer from 'jsonpointer'\nimport union from 'lodash.union'\nimport mergeAllOf from 'json-schema-merge-allof'\n\nexport function isObject(thing: any) {\n  return typeof thing === 'object' && thing !== null && !Array.isArray(thing)\n}\n\nexport function isEmptyObject(thing: any) {\n  return isObject(thing) && Object.keys(thing).length === 0\n}\n\nexport function hasOwnProperty(obj: any, key: string) {\n  /**\n   * 直接调用`obj.hasOwnProperty`有可能会因为\n   * obj 覆盖了 prototype 上的 hasOwnProperty 而产生错误\n   */\n  return Object.prototype.hasOwnProperty.call(obj, key)\n}\n\n// import { isObject, hasOwnProperty, getSchemaType, guessType } from './utils'\n// import { validateData } from './validator'\n\n// TODO: 应该跟SchemaForm的instance保持一致\nconst defaultInstance = new Ajv()\nexport function validateData(schema: any, data: any) {\n  const valid = defaultInstance.validate(schema, data)\n  return {\n    valid,\n    errors: defaultInstance.errors,\n  }\n}\n\n// function resolveSchema(schema: any, data: any = {}) {}\n\nexport function resolveSchema(schema: Schema, rootSchema = {}, formData = {}) {\n  if (hasOwnProperty(schema, '$ref')) {\n    return resolveReference(schema, rootSchema, formData)\n  } else if (hasOwnProperty(schema, 'dependencies')) {\n    const resolvedSchema = resolveDependencies(schema, rootSchema, formData)\n    return retrieveSchema(resolvedSchema, rootSchema, formData)\n  } else if (hasOwnProperty(schema, 'allOf') && Array.isArray(schema.allOf)) {\n    return {\n      ...schema,\n      allOf: schema.allOf.map((allOfSubschema) =>\n        retrieveSchema(allOfSubschema, rootSchema, formData),\n      ),\n    }\n  } else {\n    // No $ref or dependencies attribute found, returning the original schema.\n    return schema\n  }\n}\n\nexport function retrieveSchema(\n  schema: any,\n  rootSchema = {},\n  formData: any = {},\n): Schema {\n  if (!isObject(schema)) {\n    return {} as Schema\n  }\n  let resolvedSchema = resolveSchema(schema, rootSchema, formData)\n\n  // TODO: allOf and additionalProperties not implemented\n  if ('allOf' in schema) {\n    try {\n      resolvedSchema = mergeAllOf({\n        // TODO: Schema type not suitable\n        ...resolvedSchema,\n        allOf: resolvedSchema.allOf,\n      } as any) as Schema\n    } catch (e) {\n      console.warn('could not merge subschemas in allOf:\\n' + e)\n      const { allOf, ...resolvedSchemaWithoutAllOf } = resolvedSchema\n      return resolvedSchemaWithoutAllOf\n    }\n  }\n  const hasAdditionalProperties =\n    resolvedSchema.hasOwnProperty('additionalProperties') &&\n    resolvedSchema.additionalProperties !== false\n  if (hasAdditionalProperties) {\n    // put formData existing additional properties into schema\n    return stubExistingAdditionalProperties(\n      resolvedSchema,\n      rootSchema,\n      formData,\n    )\n  }\n  return resolvedSchema\n}\n\nexport const ADDITIONAL_PROPERTY_FLAG = '__additional_property'\n// This function will create new \"properties\" items for each key in our formData\nexport function stubExistingAdditionalProperties(\n  schema: Schema,\n  rootSchema: Schema = {},\n  formData: any = {},\n) {\n  // Clone the schema so we don't ruin the consumer's original\n  schema = {\n    ...schema,\n    properties: { ...schema.properties },\n  }\n\n  Object.keys(formData).forEach((key) => {\n    if ((schema as any).properties.hasOwnProperty(key)) {\n      // No need to stub, our schema already has the property\n      return\n    }\n\n    let additionalProperties\n    if (schema.additionalProperties.hasOwnProperty('$ref')) {\n      additionalProperties = retrieveSchema(\n        { $ref: schema.additionalProperties['$ref'] },\n        rootSchema,\n        formData,\n      )\n    } else if (schema.additionalProperties.hasOwnProperty('type')) {\n      additionalProperties = { ...schema.additionalProperties }\n    } else {\n      additionalProperties = { type: guessType(formData[key]) }\n    }\n\n    // The type of our new key should match the additionalProperties value;\n    ;(schema as any).properties[key] = additionalProperties\n    // Set our additional property flag so we know it was dynamically added\n    ;(schema as any).properties[key][ADDITIONAL_PROPERTY_FLAG] = true\n  })\n\n  return schema\n}\n\n// export function processSchema(\n//   schema: any,\n//   rootSchema: any = {},\n//   data: any = {}\n// ): Schema {\n//   if (hasOwnProperty(schema, '$ref')) {\n//     return resolveReference(schema, rootSchema, data)\n//   }\n//   if (hasOwnProperty(schema, 'dependencies')) {\n//     const resolvedSchema = resolveSchema(schema)\n//   }\n// }\n\nfunction resolveReference(schema: any, rootSchema: any, formData: any): Schema {\n  // Retrieve the referenced schema definition.\n  const $refSchema = findSchemaDefinition(schema.$ref, rootSchema)\n  // Drop the $ref property of the source schema.\n  const { $ref, ...localSchema } = schema\n  // Update referenced schema definition with local schema properties.\n  return retrieveSchema({ ...$refSchema, ...localSchema }, rootSchema, formData)\n}\n\nexport function findSchemaDefinition($ref: string, rootSchema = {}): Schema {\n  const origRef = $ref\n  if ($ref.startsWith('#')) {\n    // Decode URI fragment representation.\n    $ref = decodeURIComponent($ref.substring(1))\n  } else {\n    throw new Error(`Could not find a definition for ${origRef}.`)\n  }\n  const current = jsonpointer.get(rootSchema, $ref)\n  if (current === undefined) {\n    throw new Error(`Could not find a definition for ${origRef}.`)\n  }\n  if (hasOwnProperty(current, '$ref')) {\n    // return { ...current, findSchemaDefinition(current.$ref, rootSchema) }  ?\n    return findSchemaDefinition(current.$ref, rootSchema)\n  }\n  return current\n}\n\nfunction resolveDependencies(\n  schema: any,\n  rootSchema: any,\n  formData: any,\n): Schema {\n  // Drop the dependencies from the source schema.\n  let { dependencies = {}, ...resolvedSchema } = schema // eslint-disable-line\n  if ('oneOf' in resolvedSchema) {\n    resolvedSchema =\n      resolvedSchema.oneOf[\n        getMatchingOption(formData, resolvedSchema.oneOf, rootSchema)\n      ]\n  } else if ('anyOf' in resolvedSchema) {\n    resolvedSchema =\n      resolvedSchema.anyOf[\n        getMatchingOption(formData, resolvedSchema.anyOf, rootSchema)\n      ]\n  }\n  return processDependencies(dependencies, resolvedSchema, rootSchema, formData)\n}\nfunction processDependencies(\n  dependencies: any,\n  resolvedSchema: any,\n  rootSchema: any,\n  formData: any,\n): Schema {\n  // Process dependencies updating the local schema properties as appropriate.\n  for (const dependencyKey in dependencies) {\n    // Skip this dependency if its trigger property is not present.\n    if (formData[dependencyKey] === undefined) {\n      continue\n    }\n    // Skip this dependency if it is not included in the schema (such as when dependencyKey is itself a hidden dependency.)\n    if (\n      resolvedSchema.properties &&\n      !(dependencyKey in resolvedSchema.properties)\n    ) {\n      continue\n    }\n    const {\n      [dependencyKey]: dependencyValue,\n      ...remainingDependencies\n    } = dependencies\n    if (Array.isArray(dependencyValue)) {\n      resolvedSchema = withDependentProperties(resolvedSchema, dependencyValue)\n    } else if (isObject(dependencyValue)) {\n      resolvedSchema = withDependentSchema(\n        resolvedSchema,\n        rootSchema,\n        formData,\n        dependencyKey,\n        dependencyValue,\n      )\n    }\n    return processDependencies(\n      remainingDependencies,\n      resolvedSchema,\n      rootSchema,\n      formData,\n    )\n  }\n  return resolvedSchema\n}\n\nfunction withDependentProperties(schema: any, additionallyRequired: any) {\n  if (!additionallyRequired) {\n    return schema\n  }\n  const required = Array.isArray(schema.required)\n    ? Array.from(new Set([...schema.required, ...additionallyRequired]))\n    : additionallyRequired\n  return { ...schema, required: required }\n}\n\nfunction withDependentSchema(\n  schema: any,\n  rootSchema: any,\n  formData: any,\n  dependencyKey: any,\n  dependencyValue: any,\n) {\n  // retrieveSchema\n  const { oneOf, ...dependentSchema } = retrieveSchema(\n    dependencyValue,\n    rootSchema,\n    formData,\n  )\n  schema = mergeSchemas(schema, dependentSchema)\n  // Since it does not contain oneOf, we return the original schema.\n  if (oneOf === undefined) {\n    return schema\n  } else if (!Array.isArray(oneOf)) {\n    throw new Error(`invalid: it is some ${typeof oneOf} instead of an array`)\n  }\n  // Resolve $refs inside oneOf.\n  const resolvedOneOf = oneOf.map((subschema) =>\n    hasOwnProperty(subschema, '$ref')\n      ? resolveReference(subschema, rootSchema, formData)\n      : subschema,\n  )\n  return withExactlyOneSubschema(\n    schema,\n    rootSchema,\n    formData,\n    dependencyKey,\n    resolvedOneOf,\n  )\n}\n\nfunction withExactlyOneSubschema(\n  schema: any,\n  rootSchema: any,\n  formData: any,\n  dependencyKey: any,\n  oneOf: any,\n) {\n  const validSubschemas = oneOf.filter((subschema: any) => {\n    if (!subschema.properties) {\n      return false\n    }\n    const { [dependencyKey]: conditionPropertySchema } = subschema.properties\n    if (conditionPropertySchema) {\n      const conditionSchema = {\n        type: 'object',\n        properties: {\n          [dependencyKey]: conditionPropertySchema,\n        },\n      }\n      // TODO: validate formdata\n      const { errors } = validateData(conditionSchema, formData)\n      return !errors || errors.length === 0\n    }\n  })\n  if (validSubschemas.length !== 1) {\n    console.warn(\n      \"ignoring oneOf in dependencies because there isn't exactly one subschema that is valid\",\n    )\n    return schema\n  }\n  // debugger\n  const subschema = validSubschemas[0]\n  const {\n    [dependencyKey]: conditionPropertySchema,\n    ...dependentSubschema\n  } = subschema.properties\n  const dependentSchema = { ...subschema, properties: dependentSubschema }\n  return mergeSchemas(\n    schema,\n    // retrieveSchema\n    retrieveSchema(dependentSchema, rootSchema, formData),\n  )\n}\n\n// Recursively merge deeply nested schemas.\n// The difference between mergeSchemas and mergeObjects\n// is that mergeSchemas only concats arrays for\n// values under the \"required\" keyword, and when it does,\n// it doesn't include duplicate values.\nexport function mergeSchemas(obj1: any, obj2: any) {\n  const acc = Object.assign({}, obj1) // Prevent mutation of source object.\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key]\n    if (obj1 && hasOwnProperty(obj1, key) && isObject(right)) {\n      acc[key] = mergeSchemas(left, right)\n    } else if (\n      obj1 &&\n      obj2 &&\n      (getSchemaType(obj1) === 'object' || getSchemaType(obj2) === 'object') &&\n      key === 'required' &&\n      Array.isArray(left) &&\n      Array.isArray(right)\n    ) {\n      // Don't include duplicate values when merging\n      // \"required\" fields.\n      acc[key] = union(left, right)\n    } else {\n      acc[key] = right\n    }\n    return acc\n  }, acc)\n}\n\n// export function getVJSFConfig(\n//   schema: Schema,\n//   uiSchema: VueJsonSchemaConfig | undefined,\n// ): VueJsonSchemaConfig {\n//   if (uiSchema) return uiSchema\n//   return schema.vjsf || {}\n// }\n\n/* Gets the type of a given schema. */\nexport function getSchemaType(schema: Schema): string | undefined {\n  const { type } = schema\n\n  if (!type && schema.const) {\n    return guessType(schema.const)\n  }\n\n  if (!type && schema.enum) {\n    return 'string'\n  }\n\n  if (!type && (schema.properties || schema.additionalProperties)) {\n    return 'object'\n  }\n\n  const t: any = type\n  if (t instanceof Array && t.length === 2 && t.includes('null')) {\n    return t.find((type) => type !== 'null')\n  }\n\n  return type\n\n  // let { type } = schema\n\n  // if (type) return type\n\n  // if (!type && schema.const) {\n  //   return guessType(schema.const)\n  // }\n\n  // if (!type && schema.enum) {\n  //   // return 'string'\n  //   return guessType(schema.enum[0])\n  // }\n\n  // if (!type && (schema.properties || schema.additionalProperties)) {\n  //   return 'object'\n  // }\n\n  // console.warn('can not guess schema type, just use object', schema)\n  // return 'object'\n\n  // if (type instanceof Array && type.length === 2 && type.includes('null')) {\n  //   return type.find((type) => type !== 'null')\n  // }\n}\n\n// In the case where we have to implicitly create a schema, it is useful to know what type to use\n//  based on the data we are defining\nexport const guessType = function guessType(value: any) {\n  if (Array.isArray(value)) {\n    return 'array'\n  } else if (typeof value === 'string') {\n    return 'string'\n  } else if (value == null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return 'boolean'\n  } else if (!isNaN(value)) {\n    return 'number'\n  } else if (typeof value === 'object') {\n    return 'object'\n  }\n  // Default to string if we can't figure it out\n  return 'string'\n}\n\nexport function isConstant(schema: Schema) {\n  return (\n    (Array.isArray(schema.enum) && schema.enum.length === 1) ||\n    schema.hasOwnProperty('const')\n  )\n}\n\nexport function isSelect(_schema: any, rootSchema: Schema = {}) {\n  const schema = retrieveSchema(_schema, rootSchema)\n  const altSchemas = schema.oneOf || schema.anyOf\n  if (Array.isArray(schema.enum)) {\n    return true\n  } else if (Array.isArray(altSchemas)) {\n    return altSchemas.every((altSchemas) => isConstant(altSchemas))\n  }\n  return false\n}\n\nexport function isMultiSelect(schema: Schema, rootSchema: Schema = {}) {\n  if (!schema.uniqueItems || !schema.items) {\n    return false\n  }\n  return isSelect(schema.items, rootSchema)\n}\n\n// TODO: change oneOf selected based on data\nexport function getMatchingOption(\n  formData: any,\n  options: Schema[],\n  isValid: (schema: Schema, data: any) => boolean,\n) {\n  for (let i = 0; i < options.length; i++) {\n    const option = options[i]\n\n    // If the schema describes an object then we need to add slightly more\n    // strict matching to the schema, because unless the schema uses the\n    // \"requires\" keyword, an object will match the schema as long as it\n    // doesn't have matching keys with a conflicting type. To do this we use an\n    // \"anyOf\" with an array of requires. This augmentation expresses that the\n    // schema should match if any of the keys in the schema are present on the\n    // object and pass validation.\n    if (option.properties) {\n      // Create an \"anyOf\" schema that requires at least one of the keys in the\n      // \"properties\" object\n      const requiresAnyOf = {\n        anyOf: Object.keys(option.properties).map((key) => ({\n          required: [key],\n        })),\n      }\n\n      let augmentedSchema\n\n      // If the \"anyOf\" keyword already exists, wrap the augmentation in an \"allOf\"\n      if (option.anyOf) {\n        // Create a shallow clone of the option\n        const { ...shallowClone } = option\n\n        if (!shallowClone.allOf) {\n          shallowClone.allOf = []\n        } else {\n          // If \"allOf\" already exists, shallow clone the array\n          shallowClone.allOf = shallowClone.allOf.slice()\n        }\n\n        shallowClone.allOf.push(requiresAnyOf)\n\n        augmentedSchema = shallowClone\n      } else {\n        augmentedSchema = Object.assign({}, option, requiresAnyOf)\n      }\n\n      // Remove the \"required\" field as it's likely that not all fields have\n      // been filled in yet, which will mean that the schema is not valid\n      delete augmentedSchema.required\n\n      if (isValid(augmentedSchema, formData)) {\n        return i\n      }\n    } else if (isValid(options[i], formData)) {\n      return i\n    }\n  }\n  return 0\n}\n\nexport function mergeDefaultsWithFormData(defaults: any, formData: any): any {\n  if (Array.isArray(formData)) {\n    if (!Array.isArray(defaults)) {\n      defaults = []\n    }\n    return formData.map((value, idx) => {\n      if (defaults[idx]) {\n        return mergeDefaultsWithFormData(defaults[idx], value)\n      }\n      return value\n    })\n  } else if (isObject(formData)) {\n    const acc = Object.assign({}, defaults) // Prevent mutation of source object.\n    return Object.keys(formData).reduce((acc, key) => {\n      acc[key] = mergeDefaultsWithFormData(\n        defaults ? defaults[key] : {},\n        formData[key],\n      )\n      return acc\n    }, acc)\n  } else {\n    return formData\n  }\n}\n\nexport function getDefaultFormState(\n  _schema: Schema,\n  formData: any,\n  // rootSchema = {},\n  // includeUndefinedValues = false,\n) {\n  if (!isObject(_schema)) {\n    throw new Error('Invalid schema: ' + _schema)\n  }\n  // const schema = retrieveSchema(_schema, rootSchema, formData)\n  const defaults = _schema.default\n  // TODO: I guess we don't need to get default from children schema\n  // const defaults = computeDefaults(\n  //   schema,\n  //   _schema.default,\n  //   rootSchema,\n  //   formData,\n  //   includeUndefinedValues\n  // );\n  if (typeof formData === 'undefined') {\n    // No form data? Use schema defaults.\n    return defaults\n  }\n  if (isObject(formData) || Array.isArray(formData)) {\n    return mergeDefaultsWithFormData(defaults, formData)\n  }\n  if (formData === 0 || formData === false || formData === '') {\n    return formData\n  }\n  return formData || defaults\n}\n"],"sourceRoot":""}]}